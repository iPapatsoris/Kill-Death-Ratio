{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","kills","deaths","visibleModal","killsAddition","deathsAddition","additionKDR","additionProgress","updateKills","event","_this","setState","parseInt","target","value","updateDeaths","updateKillsAddition","updateDeathsAddition","openModal","closeModal","performAddition","_this$state","toString","ratio","this","percentage","toFixed","substr","main","react_default","a","createElement","Grid","centered","className","columns","Row","Column","verticalAlign","onClick","textAlign","Input","placeholder","type","onChange","Button","color","Fragment","Modal","open","Header","Content","Description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b19319fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Input, Button, Modal, Grid } from 'semantic-ui-react';\n\nclass App extends Component {\n    state = {\n        kills: 0,\n        deaths: 0,\n        visibleModal: true,\n        killsAddition: 0,\n        deathsAddition: 0,\n        additionKDR: null,\n        additionProgress: null\n    }\n\n    updateKills = (event) => {\n        this.setState({\n            kills: parseInt(event.target.value)\n        });\n    }\n\n    updateDeaths = (event) => {\n        this.setState({\n            deaths: parseInt(event.target.value)\n        });\n    }\n\n    updateKillsAddition = (event) => {\n        this.setState({\n            killsAddition: parseInt(event.target.value)\n        });\n    }\n\n    updateDeathsAddition = (event) => {\n        this.setState({\n            deathsAddition: parseInt(event.target.value)\n        });\n    }\n\n    openModal = () => {\n        this.setState({\n            visibleModal: true\n        });\n    }\n\n    closeModal = () => {\n        this.setState({\n            visibleModal: false\n        });\n    }\n\n    performAddition = () => {\n        const {kills, deaths, killsAddition, deathsAddition} = this.state;\n        if (killsAddition === null || deathsAddition === null) {\n            return;\n        }\n        const oldRatio = kills / deaths;\n        const newRatio = (kills + killsAddition) / (deaths + deathsAddition);\n        let additionProgress = (newRatio - oldRatio).toString();\n        if (additionProgress[0] !== \"-\") {\n            additionProgress = \"+\" + additionProgress;\n        }  \n        this.setState({\n            kills: kills + killsAddition,\n            deaths: deaths + deathsAddition,\n            additionKDR: (deathsAddition ? killsAddition / deathsAddition : killsAddition),\n            additionProgress: additionProgress\n        })\n    }\n\n    render() {\n        const ratio = this.state.kills / this.state.deaths;\n        let percentage = ratio.toFixed(7).toString().substr(5, 2);\n        if (percentage[0] === \"0\") {\n            percentage = percentage[1];\n        }\n\n\n        let main = null;\n        if (!this.state.visibleModal) {\n            main = (\n                <Grid centered className=\"max-height\" columns={1}>\n                    <Grid.Row>\n                        <Grid.Column verticalAlign=\"bottom\" className=\"ratio\" onClick={this.openModal}>\n                            <p>{ratio.toFixed(3)}</p>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n\n                        <Grid.Column textAlign=\"center\" className=\"percentage\">\n                            <p>{percentage} %</p>\n                            <div className=\"addition\">\n                                <Input placeholder=\"Kills\" type=\"number\" className=\"addition-kills\" onChange={this.updateKillsAddition} />\n                                <Input placeholder=\"Deaths\" type=\"number\" className=\"addition-deaths\" onChange={this.updateDeathsAddition} />\n                                <Button color=\"blue\" className=\"add\" onClick={this.performAddition}>Add</Button>\n                                <div className=\"stats\">\n                                    <p className={this.state.additionProgress && this.state.additionProgress[0] === \"+\" ? \"green\" : \"red\"}>{this.state.additionKDR}</p>\n                                    <p className={this.state.additionProgress && this.state.additionProgress[0] === \"+\" ? \"green\" : \"red\"}>{this.state.additionProgress}</p>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            );\n        }\n\n        return (\n            <>\n                <Modal open={this.state.visibleModal}>\n                    <Modal.Header className=\"centered\">Initialise KDR</Modal.Header>\n                    <Modal.Content>\n                        <Modal.Description className=\"centered\">\n                            <Grid centered columns={1}>\n                                <Grid.Column textAlign=\"center\">\n                                    <Input placeholder=\"Kills\" type=\"number\" value={this.state.kills ? this.state.kills : \"\"} onChange={this.updateKills} />\n                                </Grid.Column>\n                                <Grid.Column textAlign=\"center\">\n                                    <Input placeholder=\"Deaths\" type=\"number\" value={this.state.deaths ? this.state.deaths : \"\"} onChange={this.updateDeaths} />\n                                </Grid.Column>\n                                <Grid.Column textAlign=\"center\">\n                                    <Button color=\"blue\" onClick={this.closeModal}>Done</Button>\n                                </Grid.Column>\n                            </Grid>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n                {main}\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}