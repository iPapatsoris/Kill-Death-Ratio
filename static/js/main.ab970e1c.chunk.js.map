{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateKills","event","setState","kills","parseInt","target","value","updateDeaths","deaths","updateKillsAddition","killsAddition","updateDeathsAddition","deathsAddition","openModal","visibleModal","closeModal","performAddition","_this$state","state","additionProgress","oldRatio","newRatio","oldPercentage","toFixed","toString","substr","newPercentage","oldRatioNoDot","split","join","newRatioNoDot","times","console","log","additionKDR","window","localStorage","ratio","percentage","main","react_default","a","createElement","Grid","centered","className","columns","Row","Column","verticalAlign","onClick","substring","textAlign","Input","placeholder","type","onChange","Button","color","Fragment","Modal","open","Header","Content","Description","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab970e1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Input, Button, Modal, Grid } from 'semantic-ui-react';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        if (window.localStorage.kills && window.localStorage.deaths) {\n            this.state = {\n                kills: window.localStorage.kills,\n                deaths: window.localStorage.deaths,\n                visibleModal: false,\n                killsAddition: 0,\n                deathsAddition: 0,\n                additionKDR: null,\n                additionProgress: null\n            };\n        } else {\n            this.state = {\n                kills: 0,\n                deaths: 0,\n                visibleModal: true,\n                killsAddition: 0,\n                deathsAddition: 0,\n                additionKDR: null,\n            };\n        }\n    }\n\n\n        updateKills = (event) => {\n            this.setState({\n                kills: parseInt(event.target.value)\n            });\n        }\n\n        updateDeaths = (event) => {\n            this.setState({\n                deaths: parseInt(event.target.value)\n            });\n        }\n\n        updateKillsAddition = (event) => {\n            this.setState({\n                killsAddition: parseInt(event.target.value)\n            });\n        }\n\n        updateDeathsAddition = (event) => {\n            this.setState({\n                deathsAddition: parseInt(event.target.value)\n            });\n        }\n\n        openModal = () => {\n            this.setState({\n                visibleModal: true\n            });\n        }\n\n        closeModal = () => {\n            this.setState({\n                visibleModal: false\n            });\n        }\n\n        performAddition = () => {\n            const { kills, deaths, killsAddition, deathsAddition } = this.state;\n            if (killsAddition === null || deathsAddition === null) {\n                return;\n            }\n            const oldRatio = kills / deaths;\n            const newRatio = (kills + killsAddition) / (deaths + deathsAddition);\n\n            let oldPercentage = parseInt(oldRatio.toFixed(7).toString().substr(5, 2));\n            let newPercentage = parseInt(newRatio.toFixed(7).toString().substr(5, 2));\n            const oldRatioNoDot = parseInt(oldRatio.toString().split('.').join('').substr(0, 4));\n            const newRatioNoDot = parseInt(newRatio.toString().split('.').join('').substr(0, 4));\n            let additionProgress;\n            let times = newRatioNoDot - oldRatioNoDot;\n            console.log(newRatioNoDot + \" \" + oldRatioNoDot)\n            if (times !== 0) {\n                if (times > 0) {\n                    additionProgress = 100 - oldPercentage;\n                    times--;\n                    additionProgress += (newPercentage + 100 * times);\n                } else {\n                    additionProgress = (-1 * oldPercentage);\n                    times *= -1;\n                    additionProgress -= (100 * times - newPercentage)\n                }\n            } else {\n                if (newRatio >= oldRatio) {\n                    additionProgress = newPercentage - oldPercentage;\n                } else {\n                    additionProgress = -1 * (oldPercentage - newPercentage);\n                }\n            }\n\n            if (newRatio >= oldRatio) {\n                additionProgress = \"+\" + additionProgress;\n            }\n            this.setState({\n                kills: kills + killsAddition,\n                deaths: deaths + deathsAddition,\n                additionKDR: (deathsAddition ? killsAddition / deathsAddition : killsAddition),\n                additionProgress: additionProgress\n            });\n            window.localStorage.kills = kills + killsAddition;\n            window.localStorage.deaths = deaths + deathsAddition;\n        }\n\n        render() {\n            const ratio = this.state.kills / this.state.deaths;\n            let percentage = ratio.toFixed(7).toString().substr(5, 2);\n            if (percentage[0] === \"0\") {\n                percentage = percentage[1];\n            }\n\n\n            let main = null;\n            if (!this.state.visibleModal) {\n                main = (\n                    <Grid centered className=\"max-height\" columns={1}>\n                        <Grid.Row>\n                            <Grid.Column verticalAlign=\"bottom\" className=\"ratio\" onClick={this.openModal}>\n                                <p>{ratio.toFixed(5).substring(0, 5)}</p>\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n\n                            <Grid.Column textAlign=\"center\" className=\"percentage\">\n                                <p>{percentage} %</p>\n                                <div className=\"addition\">\n                                    <Input placeholder=\"Kills\" type=\"number\" className=\"addition-kills\" onChange={this.updateKillsAddition} />\n                                    <Input placeholder=\"Deaths\" type=\"number\" className=\"addition-deaths\" onChange={this.updateDeathsAddition} />\n                                    <Button color=\"blue\" className=\"add\" onClick={this.performAddition}>Add</Button>\n                                    <div className=\"stats\">\n                                        <p className={this.state.additionProgress && this.state.additionProgress[0] === \"+\" ? \"green\" : \"red\"}>{(this.state.additionKDR !== null ? this.state.additionKDR.toString().substr(0, 4) : null)}</p>\n                                        <p className={this.state.additionProgress && this.state.additionProgress[0] === \"+\" ? \"green\" : \"red\"}>{(this.state.additionProgress !== null ? this.state.additionProgress + \"%\" : null)}</p>\n                                    </div>\n                                </div>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                );\n            }\n\n            return (\n                <>\n                    <Modal open={this.state.visibleModal}>\n                        <Modal.Header className=\"centered\">Initialise KDR</Modal.Header>\n                        <Modal.Content>\n                            <Modal.Description className=\"centered\">\n                                <Grid centered columns={1}>\n                                    <Grid.Column textAlign=\"center\">\n                                        <Input placeholder=\"Kills\" type=\"number\" value={this.state.kills ? this.state.kills : \"\"} onChange={this.updateKills} />\n                                    </Grid.Column>\n                                    <Grid.Column textAlign=\"center\">\n                                        <Input placeholder=\"Deaths\" type=\"number\" value={this.state.deaths ? this.state.deaths : \"\"} onChange={this.updateDeaths} />\n                                    </Grid.Column>\n                                    <Grid.Column textAlign=\"center\">\n                                        <Button color=\"blue\" onClick={this.closeModal}>Done</Button>\n                                    </Grid.Column>\n                                </Grid>\n                            </Modal.Description>\n                        </Modal.Content>\n                    </Modal>\n                    {main}\n                </>\n            );\n        }\n    }\n\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}